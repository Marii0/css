/*
selector{
    propiedad: valor;
}
*/

/*
* {
    color: rgb(255, 0, 0);
}
*/

/*
h1 {
    color: rgb(255, 0, 0);
}
*/

/* selector class --> 
.clase1 {
    color: rgb(255, 0, 0);
}
*/

/* selector id --> 
#element {
    color: rgb(255, 0, 0);
}
*/

/* selector atributo --> 
[Atributo_aqui ex. SoyElAtribuyo="loquesea"] {
    color: rgb(255, 0, 0);
}
*/

/* selector descendiente --> 
h2 p {
    color: rgb(255, 0, 0);
}
*/

/* selectro pseudo-clases 
h1:hover {
    color: rgb(255, 0, 0);
}
------------------------------------------------------------------------------------------------------*/
/*metodologia bem y unidades 

.Primera-Division {
    font-size: 10px; //cambie el em a 10px
}
.Primera-Division__h1 {
    font-size: 5em;
}

//Un em son 16 px aprox. normalmente, es una medida relativa y sirve para que se vea bien en los celulares
----------------------------------------------------------------------------------------------------------*/
/*FONDO 

* {
    padding: 0px; 
    margin: 0px;
}
.Primera-Division {
    font-size: 25px;
    background-color: black;
    width: 50vw;
    height: 50vh;
}
--------------------------------------------------------------------------------------------------------*/
/*FONT

* {
    padding: 0px; 
    margin: 0px;
}

.Primera-Division {
    font-size: 10px; 
}
.Primera-Division__h1 {
    font-size: 5em;
    font-family: 'Edu VIC WA NT Beginner', cursive;
    font-weight: 200;
    line-height: 2;
    color: blue;
}
-----------------------------------------------------------------------------------------------------------*/

/*modificacion de bloques y inline

.Primera-Division__h1 {
    display: inline; // no se puede modificar el tamaño
    display: block; // Para modificar el tamaño solo se pone width o height = 400px; ejemplo
    display: inline_block;
    background-color: rgb(0, 255, 229); 
}
-----------------------------------------------------------------------------------------------------------*/

/*modificacion de padding // el padding separa el texto de las caja
*{
    padding: 0px; // otorga 0 pixeles a todos los lados
    padding-left: 0px;
    padding-top: 0px;
    padding-right: 0px;
    padding-bottom: 0px;
    padding: 0px 0px 0px 0px; // top right bottom left
}

//centrar un texto es: text-aling: center; 
----------------------------------------------------------------------------------------------------------*/

/*modificacion de margin // el margin separa las cajas de otras cajas
*{
    margin: 10px;
    margin: 0px 0px 0px 0px; //funciona igual que el padding jaja o -> margin: 0px auto;
    border-radius: 10px;
    border-radius: 50%; //para redondearlo todo
    border: 4px solid rgb(242, 255, 0); dashed,doble,groove,inset,outset,ridge,etc.
    box-shadow: 0px 0px //los dos primero lo mueven 0px 0px //transparencia y tamaño "color";
    text-shadow: 0px 0px //los dos primero lo mueven 0px //transparencia "color"//para duplicar intensidad es coma y poner los mismos valores, 0px 0px 0px "color";
    transform: rotate(-45deg); //rota la caja 
}

//centrar un texto es: text-aling: center; 
----------------------------------------------------------------------------------------------------------*/

/*box model
esta conformado por:

content -- line-height
padding -- padding
border -- border
margin -- margin

----------------------------------------------------------------------------------------------------------*/
/*outline //no ocupa espacio, no afecta a otras cajas como border

.caja1, .caja2{
    width: 200px;
    height: 200px;
    background: yellow;
    margin: auto;
    outline: 10px solid  blue;
}
----------------------------------------------------------------------------------------------------------*/

/*position //modifica las propiedades de las cajas

.caja1{
    position: static; 
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
}

.caja1{
    position: relative; te deja mover la caja conservando el espacio inical aunque no se vea
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
}

.caja1{
    position: absolute; te deja mover la caja eliminando el espacio inical, se autoajusta al contenido, se movera tomando de referencia el viewport, puede tomar como punto de refencia a su padre si el contendor esta posicionado (colocarlo en relative)
    opacity: 0-1; ex. 0.5
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
    -------------
    top: 0px; sirve para centrar la caja
    bottom: 0px;
    left: 0px;
    right: 0px;
    margin: auto;
}

.caja1{
    position: fixed; //es como absolute pero se fija en el viewport, se usa en los menus
    
}

.caja1{
    position: sticki; //es como un fixed pero se fija en el viewport cuando llegamos a un punto especifico de la pag
    
}
----------------------------------------------------------------------------------------------------------*/
/*z-index //posiciona las cajas a traves de las cajas, entre mayor numero la caja esta en una capa mayor(mas arriba)

.caja1{
    psition: relative;
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
    z-index: 1;
    z-index: -1; /cuando hay un padre un hijo, al hijo se le pone -1 y al padre nada, es mejor no usarlo
}
----------------------------------------------------------------------------------------------------------*/

/*propiedad display

block 
inline //textos

inline-block //booques que queremos poner en linea
table ---
inline-table---
list-term ---
table-cell ---
table-row---
table-column --- ya no se usan mucho

grid 
flex 

inline-flex 
inline-grid

-------------------------------------------------------------------------------*/

/*overflow //contenido que tienes que scrollear para verlo

visble //propiedad por defecto
auto// escrollear adentro de la caja
scroll //pone la barra scroll aunque no sea necesario
overflow-y: hidden //oculta la barra
overflow-x

------------------------------------------------------------------------------*/

/*float // sirve para hacer un efecto de texto se acomoda al rededor de una imagen en cajas separadas

--------------------------------------------------------------------------------*/

/*pseudo-elementos

::first-line | block
::first-letter | block
::placeholder
::after | hijos - content(necesario) - inline
::before | hijos - content(necesario) - inline
::selection

--------------------------------------------------------------------------------*/

/*pseudo-clases

:hover
:link
:visited
:active
:focus
:lang

--------------------------------------------------------------------------------*/

/*object-fit //imagenes

fill
container
cover
none
scale-down

--------------------------------------------------------------------------------*/

/*cursor

https://www.w3schools.com/cssref/tryit.asp?filename=trycss_cursor

--------------------------------------------------------------------------------*/

/*colorizacion

color name
hexadecimal*mejor
rgb*mejor
rgba
hsl
hsla

--------------------------------------------------------------------------------*/

/*responsive design -mobile first

@media only screen and (max-width: 800 px){
    div{
        display:block;
        width:100%;
    }

--------------------------------------------------------------------------------*/


/*flex-box //las cajas flexibles son las cajas hijas

contenedor y contenido
flex container-flex item
main axis (main-start - main-end)
cross axis (cross-start - cross-end)

propiedades

flex-direction //column column-reverse row row-reverse
flex-wrap: no-wrap - wrap -wrap-reverse;
flex-flow: flex-direction flex-wrap; //abrevia las dos lineas de codigo de arriba
justify-content: center,space-arraound,space-between,space-evenly (main axis)
align-items: flex-start,center,flex-end,stretch,baseline (across axis)

align-content

--------------------------------------------------------------------------------*/

/*--propiedades de los items--
(para + de una linea)

align-self (cross axis)

--funcionamiento del margin--
margin-(direction): auto -> margin = contenedor - tamaño de la caja en el eje en el que corre (direction)
----

flex-grow: (espacio asignado + sobrante / grows)(main axis)
flex-shrink: espacio que "cede" (main axis)flex-basis: medicion antes de encogerse (en auto(defect value), agarra el width, y sino tiene mas prioridad)(main axis)
flex: flex-grow, flex-shrink, flex-basis (al menos el primer parametro obligatorio)
order: (como el z index, pero en el eje en el que apunta el main axis)


--------------------------------------------------------------------------------*/

/*grid

--conceptos basicos--

_grid
_grid container
_grid item
_grid cell
_grid tracks (column y row)
_grid area
_grid line (column line y row line)

--propiedades--

grid-template-rows (grid-container)
grid-template-columns (grid-container)

grid-row-gap (grid-container)
grid-column-gap (grid-container)
grid-gap: row column (grid-container)

grid-row-start (grid-item) //no recomendable
grid-row-end (grid-item) //no recomendable
grid-column-start (grid-item) //no recomendable
grid-column-start (grid-item) //no recomendable
grid-row (grid-item) //es mejor
grid-column (grid-item) //es mejor, se pone  1/ span 3 (desde la fila 1 y me ocupas 3 lineas mas) o 1 / 3 (desde la fila 1 a la 3)

unidades "auto" y fr
repeat(cantidad,tamaño/s)

.grid-item:nth-child(number*){
}
--------------------------------------------------------------------------------*/

/*----------grid implicito y explicito----------

3 nuevas propiedades del grid implicito
grid-auto-rows (igual que el template)
grid-auto-columns (igual que el template)
grid-auto-flow: row(default), column y dense

--------------------------------------------------------------------------------*/

/*----------grid dinamico----------

minmax()
maincontent
max-content

cantidad:

auto-fill
auto-fit

--------------------------------------------------------------------------------*/

/*----------alineacion y control de flujo----------

diferencia de flex: 

_la alineacion es dentro de cada celda y no alineacion total del flex container
_cada celda seria un "flex container"

(propiedades del grid-container)

justify-items (horizontalmente)
align-items (verticalmente)

strech(default) - start - center - end
palce-items: align-items justify-items

--------------------------------------------------------------------------------*/

/*----------alineacion de filas y columnas----------

_justify-content (horizontalmente)
align-content (verticalmente)

_strech(default) - start - center - end
mas las filas de flex: 
*space-around
*space-between
*space-evenly

--------------------------------------------------------------------------------*/

/*----------aplicado al grid item----------

_justify-self
_align-self
_place-self: align-self justify-self

strch(default) - start - center - end

_order (igual que en flex)

--------------------------------------------------------------------------------*/

/*----------areas en el grid----------

_al grid container_
grid-tempalte-areas: "nombre/s de area/s"

_al grid item_
grdi-area: "nombre del area"

--------------------------------------------------------------------------------*/

/*----------nombres a las lineas----------

[line-name]

se puede reemplazar en : grid-row | grid-column

--------------------------------------------------------------------------------*/

/*----------shorthand----------

_grid-template: row / columns (grid-container)
_grid-template: area unidad

--------------------------------------------------------------------------------*/

/*---------responsive design----------



